class Solution:
    def openLock(self, deadends: List[str], target: str) -> int:
        
        dead = set(deadends)
        queue = deque([('0000', 0)])
        visited = set('0000')

        if '0000' in dead:
            return -1
        
        while queue:
            combination, steps = queue.popleft()
            if combination == target:
                return steps

            for i in range(4):
                digit = int(combination[i])
                for move in [-1, 1]:
                    new_digit = (digit + move) % 10
                    new_combination = combination[:i] + str(new_digit) + combination[i+1:]
                    if new_combination not in visited and new_combination not in dead:
                        visited.add(new_combination)
                        queue.append((new_combination, steps+1))
        
        return -1
