class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        if len(s) != len(t):
            return False

        s_sorted = ''.join(sorted(s))
        t_sorted = ''.join(sorted(t))

        for i,j in zip(s_sorted, t_sorted):
            if i != j:
                return False

        return True 
*******************************************************
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        if len(s) != len(t):
            return False        
        s_dict = {}

        for char in s:
            s_dict[char] = s_dict.get(char, 0)+1
        
        for char in t:
            if char not in s_dict or s_dict[char] == 0:
                return False
            s_dict[char] -= 1
        
        return all(value == 0 for value in s_dict.values())
***********************************************************
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return sorted(s) == sorted(t)
***********************************************************
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:    
        char1 = []
        char2 = []
        alpha_str = "abcdefghijklmnopqrstuvwxyz"
        for i in alpha_str:
            char1.append(s.count(i))
            char2.append(t.count(i))
        
        return char1 == char2
    
