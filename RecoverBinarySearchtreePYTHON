# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def recoverTree(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        def inorder(node):
            nonlocal prev_value, first_value, second_value
            if not node:
                return
            inorder(node.left)

            if prev_value and prev_value.val > node.val:
                if not first_value:
                    first_value = prev_value
                second_value = node
            prev_value = node

            inorder(node.right)
        prev_value, first_value, second_value = None, None, None
        inorder(root)
        first_value.val, second_value.val = second_value.val, first_value.val
