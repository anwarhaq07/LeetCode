# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        
        def helper(node):
            if not node:
                return (None, 0)
            
            left_lca, left_count = helper(node.left)
            right_lca, right_count = helper(node.right)

            count = left_count+right_count+(node == p)+(node==q)

            if node == p or node == q:
                return (node, count)
            if left_lca and right_lca:
                return (node, count)
            if left_lca:
                return (left_lca, count)
            if right_lca:
                return (right_lca, count)
            return (None, 0)

        lca, count = helper(root)
        return lca if count == 2 else None
