# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        if not head or not head.next or k == 0:
            return head
        
        length = 0
        current = head
        
        while current:
            current = current.next
            length += 1
        k %= length
        if k == 0:
            return head
        
        new_tail_position = length - k - 1
        current = head

        for _ in range(new_tail_position):
            current = current.next
        
        new_head = current.next
        current.next = None
        old_tail = new_head
        
        while old_tail.next:
            old_tail = old_tail.next
        old_tail.next = head

        return new_head
