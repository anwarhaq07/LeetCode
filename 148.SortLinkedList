# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def sortList(self, head):
        """
        :type head: Optional[ListNode]
        :rtype: Optional[ListNode]
        """
        if not head:
            return head
       arr = []

        dummy = head
        while dummy:
            arr.append(dummy.val)
            dummy = dummy.next
        
        arr.sort()
        dummy = ListNode()
        current = dummy

        for val in arr:
            current.next = ListNode(val)
            current = current.next
        return dummy.next
*******************************************************************************************************
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def sortList(self, head):
        """
        :type head: Optional[ListNode]
        :rtype: Optional[ListNode]
        """
        
        if not head or not head.next:
            return head
    
        first = head
        last =  self.splitList(head)
        temp = last.next
        last.next = None
        last = temp

        list1 = self.sortList(first)
        list2 = self.sortList(last)

        return self.mergeList(list1, list2)
    
    def splitList(self, head):
        slow = head
        fast = head.next
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        return slow
    
    def mergeList(self, list1, list2):

        sortedList = dummy = ListNode()
        while list1 and list2:
            if list1.val < list2.val:
                dummy.next = list1
                list1 = list1.next
            else:
                dummy.next = list2
                list2 = list2.next
            dummy = dummy.next
        if list1:
            dummy.next = list1
        if list2:
            dummy.next = list2
        
        return sortedList.next
