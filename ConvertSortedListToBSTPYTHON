# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:
        if not head:
            return None
        
        def findSize(head):
            size = 0
            while head:
                size += 1
                head = head.next
            return size
        def buildTree(left, right):
            nonlocal head
            if left>right:
                return None
            mid = (left+right) // 2
            leftSubtree = buildTree(left, mid-1)
            root = TreeNode(head.val)
            root.left = leftSubtree
            head = head.next
            root.right = buildTree(mid+1, right)
            return root
        size = findSize(head)
        return buildTree(0, size-1)
