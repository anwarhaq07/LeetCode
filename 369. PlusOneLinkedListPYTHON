# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def plusOne(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        new_str = ""
        str_head = head

        while str_head:
            new_str += str(str_head.val)
            str_head = str_head.next
        
        new_int = str(int(new_str)+1)

        new_list = ListNode(0)
        dummy = new_list

        for digit in new_int:
            dummy.next = ListNode(int(digit))
            dummy = dummy.next
        return new_list.next
*************************************************************************************
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def reverse(self, head):

        prev = None
        while head:
            next_node = head.next
            head.next = prev
            prev = head
            head = next_node
        return prev
    
    def plusOne(self, head):

        head = self.reverse(head)
        carry = 1

        current = head

        while current:
            current.val += carry

            if current.val < 10:
                carry = 0
                break
            else:
                current.val = 0
                carry = 1
            if not current.next and carry:
                current.next = ListNode(1)
                carry = 0
            current = current.next

        return self.reverse(head)
